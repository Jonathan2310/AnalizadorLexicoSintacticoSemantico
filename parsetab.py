
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'DOT EQ EQUALS FLOAT FOR GE GREATER ID LBRACE LE LESS LPAREN NEQ NUMBER PLUS PLUSPLUS RBRACE RPAREN SEMICOLON TIMES TYPEprogram : statement_liststatement_list : statement_list statement\n                      | statementstatement : expression_statement\n                 | compound_statement\n                 | declaration_statement\n                 | for_statement\n                 | method_call_statementexpression_statement : expression SEMICOLONdeclaration_statement : TYPE ID SEMICOLON\n                             | TYPE ID EQUALS expression SEMICOLONcompound_statement : LBRACE statement_list RBRACEfor_statement : FOR LPAREN assignment_expression SEMICOLON expression SEMICOLON assignment_expression RPAREN compound_statementexpression : assignment_expression\n                  | additive_expression\n                  | relational_expressionassignment_expression : ID EQUALS expression\n                             | ID PLUSPLUSrelational_expression : expression LE expression\n                             | expression LESS expression\n                             | expression GE expression\n                             | expression GREATER expression\n                             | expression EQ expression\n                             | expression NEQ expressionadditive_expression : additive_expression PLUS multiplicative_expression\n                           | multiplicative_expressionmultiplicative_expression : multiplicative_expression TIMES primary_expression\n                                 | primary_expressionprimary_expression : ID\n                          | NUMBER\n                          | FLOAT\n                          | LPAREN expression RPAREN\n                          | method_callmethod_call : ID DOT ID DOT ID LPAREN RPAREN\n                   | ID DOT ID DOT ID LPAREN expression RPARENmethod_call_statement : method_call SEMICOLON'
    
_lr_action_items = {'LBRACE':([0,2,3,4,5,6,7,8,10,23,24,31,40,49,50,63,72,73,],[10,10,-3,-4,-5,-6,-7,-8,10,-2,-9,10,-36,-12,-10,-11,10,-13,]),'TYPE':([0,2,3,4,5,6,7,8,10,23,24,31,40,49,50,63,73,],[11,11,-3,-4,-5,-6,-7,-8,11,-2,-9,11,-36,-12,-10,-11,-13,]),'FOR':([0,2,3,4,5,6,7,8,10,23,24,31,40,49,50,63,73,],[13,13,-3,-4,-5,-6,-7,-8,13,-2,-9,13,-36,-12,-10,-11,-13,]),'ID':([0,2,3,4,5,6,7,8,10,11,14,23,24,25,26,27,28,29,30,31,33,34,36,40,41,42,49,50,51,61,62,63,66,67,73,],[12,12,-3,-4,-5,-6,-7,-8,12,32,38,-2,-9,38,38,38,38,38,38,12,52,38,55,-36,58,58,-12,-10,38,64,38,-11,38,55,-13,]),'NUMBER':([0,2,3,4,5,6,7,8,10,14,23,24,25,26,27,28,29,30,31,34,40,41,42,49,50,51,62,63,66,73,],[21,21,-3,-4,-5,-6,-7,-8,21,21,-2,-9,21,21,21,21,21,21,21,21,-36,21,21,-12,-10,21,21,-11,21,-13,]),'FLOAT':([0,2,3,4,5,6,7,8,10,14,23,24,25,26,27,28,29,30,31,34,40,41,42,49,50,51,62,63,66,73,],[22,22,-3,-4,-5,-6,-7,-8,22,22,-2,-9,22,22,22,22,22,22,22,22,-36,22,22,-12,-10,22,22,-11,22,-13,]),'LPAREN':([0,2,3,4,5,6,7,8,10,13,14,23,24,25,26,27,28,29,30,31,34,40,41,42,49,50,51,62,63,64,66,73,],[14,14,-3,-4,-5,-6,-7,-8,14,36,14,-2,-9,14,14,14,14,14,14,14,14,-36,14,14,-12,-10,14,14,-11,66,14,-13,]),'$end':([1,2,3,4,5,6,7,8,23,24,40,49,50,63,73,],[0,-1,-3,-4,-5,-6,-7,-8,-2,-9,-36,-12,-10,-11,-13,]),'RBRACE':([3,4,5,6,7,8,23,24,31,40,49,50,63,73,],[-3,-4,-5,-6,-7,-8,-2,-9,49,-36,-12,-10,-11,-13,]),'SEMICOLON':([9,12,15,16,17,18,19,20,21,22,32,35,38,39,43,44,45,46,47,48,53,54,56,57,58,59,60,65,68,71,],[24,-29,-14,40,-15,-16,-26,-28,-30,-31,50,-18,-29,-33,-19,-20,-21,-22,-23,-24,-17,62,-32,-25,-29,-27,63,67,-34,-35,]),'LE':([9,12,15,16,17,18,19,20,21,22,35,37,38,39,43,44,45,46,47,48,53,56,57,58,59,60,65,68,69,71,],[25,-29,-14,-33,-15,-16,-26,-28,-30,-31,-18,25,-29,-33,25,25,25,25,25,25,25,-32,-25,-29,-27,25,25,-34,25,-35,]),'LESS':([9,12,15,16,17,18,19,20,21,22,35,37,38,39,43,44,45,46,47,48,53,56,57,58,59,60,65,68,69,71,],[26,-29,-14,-33,-15,-16,-26,-28,-30,-31,-18,26,-29,-33,26,26,26,26,26,26,26,-32,-25,-29,-27,26,26,-34,26,-35,]),'GE':([9,12,15,16,17,18,19,20,21,22,35,37,38,39,43,44,45,46,47,48,53,56,57,58,59,60,65,68,69,71,],[27,-29,-14,-33,-15,-16,-26,-28,-30,-31,-18,27,-29,-33,27,27,27,27,27,27,27,-32,-25,-29,-27,27,27,-34,27,-35,]),'GREATER':([9,12,15,16,17,18,19,20,21,22,35,37,38,39,43,44,45,46,47,48,53,56,57,58,59,60,65,68,69,71,],[28,-29,-14,-33,-15,-16,-26,-28,-30,-31,-18,28,-29,-33,28,28,28,28,28,28,28,-32,-25,-29,-27,28,28,-34,28,-35,]),'EQ':([9,12,15,16,17,18,19,20,21,22,35,37,38,39,43,44,45,46,47,48,53,56,57,58,59,60,65,68,69,71,],[29,-29,-14,-33,-15,-16,-26,-28,-30,-31,-18,29,-29,-33,29,29,29,29,29,29,29,-32,-25,-29,-27,29,29,-34,29,-35,]),'NEQ':([9,12,15,16,17,18,19,20,21,22,35,37,38,39,43,44,45,46,47,48,53,56,57,58,59,60,65,68,69,71,],[30,-29,-14,-33,-15,-16,-26,-28,-30,-31,-18,30,-29,-33,30,30,30,30,30,30,30,-32,-25,-29,-27,30,30,-34,30,-35,]),'DOT':([12,38,52,58,],[33,33,61,33,]),'EQUALS':([12,32,38,55,],[34,51,34,34,]),'PLUSPLUS':([12,38,55,],[35,35,35,]),'TIMES':([12,16,19,20,21,22,38,39,56,57,58,59,68,71,],[-29,-33,42,-28,-30,-31,-29,-33,-32,42,-29,-27,-34,-35,]),'PLUS':([12,16,17,19,20,21,22,38,39,56,57,58,59,68,71,],[-29,-33,41,-26,-28,-30,-31,-29,-33,-32,-25,-29,-27,-34,-35,]),'RPAREN':([15,17,18,19,20,21,22,35,37,38,39,43,44,45,46,47,48,53,56,57,58,59,66,68,69,70,71,],[-14,-15,-16,-26,-28,-30,-31,-18,56,-29,-33,-19,-20,-21,-22,-23,-24,-17,-32,-25,-29,-27,68,-34,71,72,-35,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statement_list':([0,10,],[2,31,]),'statement':([0,2,10,31,],[3,23,3,23,]),'expression_statement':([0,2,10,31,],[4,4,4,4,]),'compound_statement':([0,2,10,31,72,],[5,5,5,5,73,]),'declaration_statement':([0,2,10,31,],[6,6,6,6,]),'for_statement':([0,2,10,31,],[7,7,7,7,]),'method_call_statement':([0,2,10,31,],[8,8,8,8,]),'expression':([0,2,10,14,25,26,27,28,29,30,31,34,51,62,66,],[9,9,9,37,43,44,45,46,47,48,9,53,60,65,69,]),'assignment_expression':([0,2,10,14,25,26,27,28,29,30,31,34,36,51,62,66,67,],[15,15,15,15,15,15,15,15,15,15,15,15,54,15,15,15,70,]),'method_call':([0,2,10,14,25,26,27,28,29,30,31,34,41,42,51,62,66,],[16,16,16,39,39,39,39,39,39,39,16,39,39,39,39,39,39,]),'additive_expression':([0,2,10,14,25,26,27,28,29,30,31,34,51,62,66,],[17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,]),'relational_expression':([0,2,10,14,25,26,27,28,29,30,31,34,51,62,66,],[18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,]),'multiplicative_expression':([0,2,10,14,25,26,27,28,29,30,31,34,41,51,62,66,],[19,19,19,19,19,19,19,19,19,19,19,19,57,19,19,19,]),'primary_expression':([0,2,10,14,25,26,27,28,29,30,31,34,41,42,51,62,66,],[20,20,20,20,20,20,20,20,20,20,20,20,20,59,20,20,20,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','analizadorSintactico.py',9),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','analizadorSintactico.py',14),
  ('statement_list -> statement','statement_list',1,'p_statement_list','analizadorSintactico.py',15),
  ('statement -> expression_statement','statement',1,'p_statement','analizadorSintactico.py',24),
  ('statement -> compound_statement','statement',1,'p_statement','analizadorSintactico.py',25),
  ('statement -> declaration_statement','statement',1,'p_statement','analizadorSintactico.py',26),
  ('statement -> for_statement','statement',1,'p_statement','analizadorSintactico.py',27),
  ('statement -> method_call_statement','statement',1,'p_statement','analizadorSintactico.py',28),
  ('expression_statement -> expression SEMICOLON','expression_statement',2,'p_expression_statement','analizadorSintactico.py',33),
  ('declaration_statement -> TYPE ID SEMICOLON','declaration_statement',3,'p_declaration_statement','analizadorSintactico.py',38),
  ('declaration_statement -> TYPE ID EQUALS expression SEMICOLON','declaration_statement',5,'p_declaration_statement','analizadorSintactico.py',39),
  ('compound_statement -> LBRACE statement_list RBRACE','compound_statement',3,'p_compound_statement','analizadorSintactico.py',50),
  ('for_statement -> FOR LPAREN assignment_expression SEMICOLON expression SEMICOLON assignment_expression RPAREN compound_statement','for_statement',9,'p_for_statement','analizadorSintactico.py',55),
  ('expression -> assignment_expression','expression',1,'p_expression','analizadorSintactico.py',66),
  ('expression -> additive_expression','expression',1,'p_expression','analizadorSintactico.py',67),
  ('expression -> relational_expression','expression',1,'p_expression','analizadorSintactico.py',68),
  ('assignment_expression -> ID EQUALS expression','assignment_expression',3,'p_assignment_expression','analizadorSintactico.py',73),
  ('assignment_expression -> ID PLUSPLUS','assignment_expression',2,'p_assignment_expression','analizadorSintactico.py',74),
  ('relational_expression -> expression LE expression','relational_expression',3,'p_relational_expression','analizadorSintactico.py',85),
  ('relational_expression -> expression LESS expression','relational_expression',3,'p_relational_expression','analizadorSintactico.py',86),
  ('relational_expression -> expression GE expression','relational_expression',3,'p_relational_expression','analizadorSintactico.py',87),
  ('relational_expression -> expression GREATER expression','relational_expression',3,'p_relational_expression','analizadorSintactico.py',88),
  ('relational_expression -> expression EQ expression','relational_expression',3,'p_relational_expression','analizadorSintactico.py',89),
  ('relational_expression -> expression NEQ expression','relational_expression',3,'p_relational_expression','analizadorSintactico.py',90),
  ('additive_expression -> additive_expression PLUS multiplicative_expression','additive_expression',3,'p_additive_expression','analizadorSintactico.py',95),
  ('additive_expression -> multiplicative_expression','additive_expression',1,'p_additive_expression','analizadorSintactico.py',96),
  ('multiplicative_expression -> multiplicative_expression TIMES primary_expression','multiplicative_expression',3,'p_multiplicative_expression','analizadorSintactico.py',105),
  ('multiplicative_expression -> primary_expression','multiplicative_expression',1,'p_multiplicative_expression','analizadorSintactico.py',106),
  ('primary_expression -> ID','primary_expression',1,'p_primary_expression','analizadorSintactico.py',115),
  ('primary_expression -> NUMBER','primary_expression',1,'p_primary_expression','analizadorSintactico.py',116),
  ('primary_expression -> FLOAT','primary_expression',1,'p_primary_expression','analizadorSintactico.py',117),
  ('primary_expression -> LPAREN expression RPAREN','primary_expression',3,'p_primary_expression','analizadorSintactico.py',118),
  ('primary_expression -> method_call','primary_expression',1,'p_primary_expression','analizadorSintactico.py',119),
  ('method_call -> ID DOT ID DOT ID LPAREN RPAREN','method_call',7,'p_method_call','analizadorSintactico.py',131),
  ('method_call -> ID DOT ID DOT ID LPAREN expression RPAREN','method_call',8,'p_method_call','analizadorSintactico.py',132),
  ('method_call_statement -> method_call SEMICOLON','method_call_statement',2,'p_method_call_statement','analizadorSintactico.py',141),
]
